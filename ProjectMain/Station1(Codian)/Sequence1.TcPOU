<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Sequence1" Id="{e6254890-a34f-4cc7-947f-9cf6cbf57e21}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Sequence1
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	
	Delta					: Delta;
	myRoute					: Route;	// test Route;
	
	// ========= Example Application Variables =========
	
	nextStation				: USINT := 4;
	
	lowVelocity				: LREAL := 200; 	// mm/s
	mediumVelocity			: LREAL := 800;		// mm/s
	highVelocity			: LREAL := 2000; 	// mm/s

	
	// ========= Helper, State, & Index Variables =========
	
	i						: UINT;					// index variable; gets reused in various FOR loops
	n						: UINT;					// secondary index variable, for enabling movers
	allMoversEnabled		: BOOL;					// helper flag for verifying enable status of all movers
	
	MainState				: MainState_enum;		// enumeration for the Main state machine
	MainCommands			: MainCommands_typ;		// command struct for cycling thru the state machine
	
	SystemCommands			: SystemCommands_typ;	// command struct for system-wide XTS & Delta commands
	
		
	// ========= Linked NC Variables & References =========
	XTS_CA_GroupRef			: AXES_GROUP_REF;							// linked to the Collision Avoidance group and passed cyclically to every Mover object
	
	// ========== Conveyor Tracking Objects ==========

	{attribute 'tcinitsymbol'}	TRACK_FRAME	: MC_COORD_REF;
	{attribute 'tcinitsymbol'}	WORLD_FRAME : MC_COORD_REF;

	ReleaseTimer: TON;
	DeltaState: UINT;
	VisuPars: Visu_typ;
	
	one: BOOL;
	two: BOOL;
	zero: BOOL;
	xStart :BOOL;
	DwellTimer: TON;
	PickParams: PickPars_typ;
	
	xTempMoveMover: BOOL;
	PickFromXTS: INT;
	gState: INT;
	loadTon: TON;
	xstoploop: BOOL;
	bTest: BOOL;
	xTest: LREAL;
	yTest: LREAL;
	zTest: LREAL;
	iNumBuffered: INT;
	iNumToSend : INT:=3;
	xSTop : bool;
	
	xDoQue: BOOL;
	xSendTwo: BOOL;
	bSendMover: BOOL;
	bTrack: BOOL;
	WorkTon:TON;
	iCounter: INT;
	bEnableDelta: BOOL;
	bResetDelta: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Delta.MotionParameters.Velocity			:= 20;
		Delta.MotionParameters.Acceleration		:= 11000;
		Delta.MotionParameters.Deceleration		:= 11000;
		Delta.MotionParameters.Jerk				:= 50000;
		Delta.MotionParameters.BlendingRadius	:= 5;	
	

Delta.Cyclic();

IF bEnableDelta THEN
	bEnableDelta := FALSE;
	Delta.Enable();
END_IF

IF bResetDelta THEN
	bResetDelta := FALSE;
	Delta.Reset();
END_IF

IF bTest THEN
	bTest := FALSE;
	Delta.MoveDirectTo(xTest, yTest, zTest);	
END_IF

//This is where you would call the Delta logic and interact with the XTS
(*
CASE gState OF
	
0: IF xStart THEN
		gState := 100;
	END_IF

100: // Move to Pick Position over Conveyer
		IF GVL_Conveyer.bSensor THEN
			Delta.MoveDirectTo( PickParams.Conveyer.x, PickParams.Conveyer.y, PickParams.Conveyer.z + 20 );	
			gState := 105;
		END_IF

105: //Move to Pick Puck
		IF Delta.MovePathDone THEN
			Delta.MoveDirectTo( PickParams.Conveyer.x, PickParams.Conveyer.y, PickParams.Conveyer.z  );	
			Delta.EnableAir();		
			gState := 110;
		END_IF
			
120: //Move to Pick Position over Conveyer
		Delta.MoveDirectTo( PickParams.Conveyer.x, PickParams.Conveyer.y, PickParams.Conveyer.z + 20 );	
		gState := 125;
125: //Place Position over XTS
		IF Delta.MovePathDone THEN
			Delta.MoveDirectTo( PickParams.PlaceXTS.x, PickParams.PlaceXTS.y, PickParams.PlaceXTS.z + 10 );	
			gState := 127;
		END_IF
127:
		IF Delta.MovePathDone THEN
			gState := 128;
		END_IF
128: //Place Puck on XTS
		IF GVL_XTS.mover0InPosition THEN
			Delta.MoveDirectTo( PickParams.PlaceXTS.x, PickParams.PlaceXTS.y, PickParams.PlaceXTS.z);			
			gState := 130;
		END_IF

130: //Disable the AIR
		IF Delta.MovePathDone THEN
			Delta.DisableAir();	
			gState := 132;	
		END_IF
132: //Place position over XTS
		Delta.MoveDirectTo( PickParams.PlaceXTS.x, PickParams.PlaceXTS.y, PickParams.PlaceXTS.z + 20 );	
			gState := 135;
		
135: //Send release signal to XTS
		IF Delta.MovePathDone THEN	
			GVL_XTS.bDeltaRelease := TRUE;
			gState := 140;
		END_IF
140: //Confirm mover was released
		IF GVL_XTS.bDeltaReleased THEN	
			GVL_XTS.bDeltaReleased := FALSE;		
				gState := 10;
		END_IF
END_CASE


*)











]]></ST>
    </Implementation>
    <LineIds Name="Sequence1">
      <LineId Id="761" Count="4" />
      <LineId Id="759" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="747" Count="0" />
      <LineId Id="590" Count="1" />
      <LineId Id="671" Count="1" />
      <LineId Id="674" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="48" Count="11" />
      <LineId Id="485" Count="2" />
      <LineId Id="498" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="484" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="483" Count="0" />
      <LineId Id="107" Count="15" />
      <LineId Id="124" Count="8" />
      <LineId Id="503" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="2" />
      <LineId Id="504" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="146" Count="1" />
      <LineId Id="507" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="332" Count="13" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>